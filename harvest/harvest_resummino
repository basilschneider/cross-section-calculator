#!/usr/bin/env bash

set -e -o pipefail

# Compile output from Resummino into a Twiki friendly format and produce a plot

# TODO: Make plot with cross sections.
# TODO: Give the user some control over verbosity of this script.
# TODO: When combining several log files, the mass is used as index. It is not
#       checked if the cross sections with the same mass are indeed from
#       different log files, as they should be. In any case, this scenario is
#       highly unlikely and involves a botched calculation of the cross sections
#       in the first place.

# Global variables
twikidir=twikis
textdir=tables

# Use echo to output to stderr
errcho(){
    >&2 echo ${@}
}

# Output to Twiki file
twikilog(){
    echo "${@} " >> "${twikifile}"
}

# Get input directory from positional argument
get_inputdir(){
    local inputdir="${1}"

    # Remove all trailing slashes from inputdir
    while [[ "${inputdir: -1}" == / ]]; do
        inputdir="${inputdir%/}"
    done

    echo "${inputdir}"
}

# Make sure that you pick up the right cross section
check_xs_format(){
    # Compare format up to "(" character with expected format in the log files
    local xs_log="${1%(*}"
    local exp_log="${2}"
    if [[ ! "${xs_log}" == "${exp_log} = " ]]; then
        echo "Could not determine ${exp_log} cross section."
        echo "Exit."
        exit 2
    fi
}

# Extract cross section from log file
get_xs(){
    echo $(sed 's/^.*(\([^ ]*\).*/\1/' <<< "${1}")
}

# Extract uncertainty on cross section from log file
get_err(){
    echo $(sed 's/^.*+- \([^)]*\).*/\1/' <<< "${1}")
}

# Return "float" rounded to 4 significant digits
round_values_4(){
    local value="${1}"
    awk '{printf("%.4g\n", 1000*$0)}' <<< "${value}"
}

# Return "float" rounded to 5 significant digits
round_values_5(){
    local value="${1}"
    awk '{printf("%.5g\n", 1000*$0)}' <<< "${value}"
}

# Add two floating numbers
add_float(){
    awk '{print($1+$2)}' <<< "${1} ${2}"
}

# Get human readable version of the model
get_hr_slha(){
    if [ "${slha}" == wino ]; then
        echo Wino
    elif [ "${slha}" == hino ]; then
        echo Higgsino
    else
        echo "${slha}"
    fi
}

# Get human readable name of the particle, i.e. translate PDGID to particle name
get_hr_pname(){
    p="${1}"
    if [ "${p}" -eq 1000022 ]; then # N1
        echo "&#967;&#771;<sup>0</sup><sub>1</sub>"
    elif [ "${p}" -eq 1000023 ]; then # N2
        echo "&#967;&#771;<sup>0</sup><sub>2</sub>"
    elif [ "${p}" -eq 1000024 ]; then # C1
        echo "&#967;&#771;<sup>+</sup><sub>1</sub>"
    elif [ "${p}" -eq -1000024 ]; then # C1
        echo "&#967;&#771;<sup>-</sup><sub>1</sub>"
    else
        echo "${p}"
    fi
}

# Input: Twiki file name; output: text file name
get_textfile(){
    local textfile="${1}"
    # Rename directory
    textfile="${textfile/${twikidir}/${textdir}}"
    # Rename file extension
    textfile="${textfile/.twk/.txt}"
    echo "${textfile}"
}


# Signature as HTML comment on Twiki to retrace source of values
signature(){
    twikilog "<!--"
    twikilog "    Cross section table generated with Cross Section Calculator"
    twikilog "    https://github.com/basilschneider/cross-section-calculator"
    for inputdir; do
        twikilog "    Input directory: ${inputdir}"
    done
    twikilog "    Date: $(date +%d-%m-%Y" "%H:%M:%S)"
    twikilog "-->"
    twikilog
}

# Add table properties to Twiki file
table_props(){
    # Table properties
    twikilog -n '%TABLE{ tableborder="0" cellpadding="4" cellspacing="3"'
    twikilog -n 'cellborder="1" headerrows="1" columnwidths="80, 125, 125"'
    twikilog -n 'headeralign="center" dataalign="right" headercolor="#FFFFFF"'
    twikilog -n 'headerbg="#437B58" databg="#A1C2B1, #CFDFD5"'
    twikilog 'datacolor="#000000"}%'
    twikilog
}

# Add table header row to Twiki file
table_header(){
    # Table header row
    twikilog -n " | *m<sub>&#967;&#771;</sub> [GeV]* | *&sigma; [fb]*"
    twikilog " | *uncertainty [fb]* |"
}

# Add an entry in the table in the Twiki file
table_entry(){
    # Remove the padding 0s for the first positional argument (mass) that have
    # been added to ensure correct ordering
    # For this, extglob needs to be set; we will unset it later again
    shopt -s extglob
    twikilog " | ${1##+(0)} | ${2} | ${3} |"
    shopt -u extglob
}

# Add an entry in the text file
text_entry(){
    # Remove the padding 0s for the first positional argument (mass) that have
    # been added to ensure correct ordering
    # For this, extglob needs to be set; we will unset it later again
    shopt -s extglob
    printf "%5s  %8s  %8s\n" "${1##+(0)}" "${2}" "${3}" >> "${textfile}"
    shopt -u extglob
}

# Create one log file per positional argument
run(){

    # Check that input directory is defined
    if [ ! -d "${1}" ]; then
        echo -n "Need path to directory with Resummino logs "
        echo "as first positional argument."
        echo "Exit."
        exit 1
    fi

    local inputdir=$(get_inputdir "${1}")

    # Retrieve information from directory name
    local dir="${inputdir##*/}"
    local slha="${dir%%_*}"
    local com="${dir#*_}"
    com="${com%TeV*}"
    local p1="${dir#*_}"
    p1="${p1#*_}"
    local p2="${p1#*_}"
    p1="${p1%_*}"
    p1="${p1/m/-}"
    p2="${p2/m/-}"
    local cluster="${inputdir%/*}"
    cluster="${cluster##*/}"
    local twikifile="${twikidir}/${cluster}_${dir}.twk"
    local textfile="$(get_textfile "${twikifile}")"

    # If not yet done, define combined Twiki file
    if [ -z "${combined}" ]; then
        combined="${twikifile/.twk/_combined.twk}"
    fi

    # Remove output file
    rm -f "${twikifile}"
    rm -f "${textfile}"

    # Make variables human readable for the Twiki page
    local slha_hr=$(get_hr_slha)
    local p1_hr=$(get_hr_pname "${p1}")
    local p2_hr=$(get_hr_pname "${p2}")

    # Collect various variables in arrays to access them later again for the
    # combination of the log files
    twikifiles+=("${twikifile}")
    p1_hrs+=("${p1_hr}")
    p2_hrs+=("${p2_hr}")
    slha_hrs+=("${slha_hr}")
    coms+=("${com}")
    inputdirs+=("${inputdir}")

    # Add signature
    signature "${inputdir}"

    # Title for Twiki page
    twikilog -n "---+++ NLO+NNLL ${slha_hr} cross sections for"
    twikilog "${p1_hr}${p2_hr} production at sqrt(s) = ${com} !TeV"
    twikilog

    table_props
    table_header

    for log in "${inputdir}"/*; do

        echo "Check log file ${log}."

        local mass="${log##*_}"
        mass="${mass%.log}"

        # Get cross sections (LO, NLO and NLO+NNLL)
        # Since sed exits, there is no-one reading the piped output of tac
        # anymore and tac will return exit code 141 (SIGPIPE); we don't want
        # that to stop the program, though, so we turn off pipefail for a moment
        set +o pipefail
        local lo_log="$(tac "${log}" | sed -n '5{p;q}')"
        local nlo_log="$(tac "${log}" | sed -n '4{p;q}')"
        local nlonnll_log="$(tac "${log}" | sed -n '3{p;q}')"
        set -o pipefail

        # Check if these are indeed cross sections by comparing to the expected
        # format from Resummino
        check_xs_format "${lo_log}" "LO"
        check_xs_format "${nlo_log}" "NLO"
        check_xs_format "${nlonnll_log}" "NLO+NLL"

        # Extract cross sections and uncertainties from log entry
        local lo=$(get_xs "${lo_log}")
        local lo_err=$(get_err "${lo_log}")
        local nlo=$(get_xs "${nlo_log}")
        local nlo_err=$(get_err "${nlo_log}")
        local nlonnll=$(get_xs "${nlonnll_log}")
        local nlonnll_err=$(get_err "${nlonnll_log}")

        # Round values
        lo=$(round_values_5 "${lo}")
        lo_err=$(round_values_4 "${lo_err}")
        nlo=$(round_values_5 "${nlo}")
        nlo_err=$(round_values_4 "${nlo_err}")
        nlonnll=$(round_values_5 "${nlonnll}")
        nlonnll_err=$(round_values_4 "${nlonnll_err}")

        # Store results for later combination
        masses+=("${mass}")
        nlonnlls+=("${nlonnll}")
        nlonnll_errs+=("${nlonnll_err}")

        # Output results
        #echo "LO:       ${lo} +/- ${lo_err}"
        #echo "NLO:      ${nlo} +/- ${nlo_err}"
        #echo "NLO+NNLL: ${nlonnll} +/- ${nlonnll_err}"
        table_entry "${mass}" "${nlonnll}" "${nlonnll_err}"
        text_entry "${mass}" "${nlonnll}" "${nlonnll_err}"

    done
}

# Check that all elements are the same
check_elements_same(){
    local dscrptn="${1}"
    shift
    local element
    for element; do
        # Compare old_element with element; if old_element is not set,
        # substitute with element and the comparison is trivially true
        if [ "${old_element-${element}}" != "${element}" ]; then
            echo -n "You try to combine different ${dscrptn}, which does not "
            echo -n "make much sense. Offending values are: "
            echo "${old_element} / ${element}"
            echo "Exit."
            exit 3
        fi
        local old_element="${element}"
    done
}

# Check if element is already in array and return its index
return_index(){
    # If element (${1}) is found in array (${2} to ${n}), return its index in
    # the array, otherwise return -1
    local element="${1}"
    shift
    # Return value
    local ret=-1
    local idx=0
    local x
    for x; do
        # If we found the element, idx is the right index and we can break
        if [ "${x}" == "${element}" ]; then
            ret="${idx}"
            break
        fi
        (( idx++ ))
    done
    echo "${ret}"
}

# Combine all separate log files
combine(){

    # Set output files
    local twikifile="${combined}"
    local textfile="$(get_textfile "${twikifile}")"
    unset combined

    # Remove combined Twiki file
    rm -f "${twikifile}"

    # Check that all elements in these arrays are the same, it does not make
    # much sense to combine cross sections for e.g. sqrt(s) of 13 and 14 TeV or
    # for winos and higgsinos
    check_elements_same "center of masses" "${coms[@]}"
    check_elements_same "particle types" "${slha_hrs[@]}"

    # Add signature
    signature "${inputdirs[@]}"

    # Title for Twiki page, loop over all particle combination
    twikilog -n "---+++ NLO+NNLL ${slha_hrs[0]} cross sections for combined"
    for (( i=0; i<${#p1_hrs[@]}; i++ )); do
        twikilog -n "${and}${p1_hrs[$i]}${p2_hrs[$i]}"
        local and="and "
    done
    twikilog "production at sqrt(s) = ${coms[0]} !TeV"
    twikilog

    table_props
    table_header

    # Loop over arrays and combine the values from the old arrays into new
    # arrays, such that the mass is unique in the new arrays; there are two
    # cases to distinguish, depending if the mass (which serves as an "index")
    # from the original array is found (or not) in the new array:
    # a) if the mass is not found, we create new entries in all new arrays
    # b) if the mass is found, we add the cross section (linearly) and the
    #    uncertainty (linearly) to the existing values; the reason why we add
    #    the uncertainty linearly is, because they are fully correlated
    for (( i=0; i<${#masses[@]}; i++ )); do
        local mass="${masses[$i]}"
        local nlonnll="${nlonnlls[$i]}"
        local nlonnll_err="${nlonnll_errs[$i]}"
        # Check if mass is already present in combined arrays
        local idx=$(return_index "${mass}" "${masses_combined[@]}")
        if [ ${idx} -eq -1 ]; then
            # contributions_combined counts the number of different
            # contributions
            contributions_combined+=(1)
            masses_combined+=("${mass}")
            nlonnlls_combined+=("${nlonnll}")
            nlonnll_errs_combined+=("${nlonnll_err}")
        else
            (( contributions_combined[$idx]++ ))
            nlonnlls_combined[$idx]=$(
            add_float "${nlonnlls_combined[$idx]}" "${nlonnll}")
            nlonnll_errs_combined[$idx]=$(
            add_float "${nlonnll_errs_combined[$idx]}" "${nlonnll_err}")
        fi
    done

    ## Print content of combined arrays (for debugging)
    #echo -n "Length and content of contributions_combined: "
    #echo "${#contributions_combined[@]} - ${contributions_combined[@]}"
    #echo -n "Length and content of masses_combined: "
    #echo "${#masses_combined[@]} - ${masses_combined[@]}"
    #echo -n "Length and content of nlonnlls_combined: "
    #echo "${#nlonnlls_combined[@]} - ${nlonnlls_combined[@]}"
    #echo -n "Length and content of nlonnll_errs_combined: "
    #echo "${#nlonnll_errs_combined[@]} - ${nlonnll_errs_combined[@]}"

    # Now loop over the new arrays and make a table entry for each element
    for (( i=0; i<${#masses_combined[@]}; i++ )); do

        # Check that the given mass point has the same number of contributions as the
        # number of log files passed to this script.
        # Why? Because every cross section should be combined. You don't want to
        # combine e.g. masses (100 125 150) with (100 150), since this would give an
        # uncombined value for 125.
        if [ ${contributions_combined[$i]} -ne "${n_input_dirs}" ]; then
            echo -n "For the mass ${masses_combined[$i]}, there is only "
            echo -n "${contributions_combined[$i]} contribution, but "
            echo "${n_input_dirs} log files are given. Skip this point."
            continue
        fi
        table_entry "${masses_combined[$i]}" "${nlonnlls_combined[$i]}" \
            "${nlonnll_errs_combined[$i]}"
        text_entry "${masses_combined[$i]}" "${nlonnlls_combined[$i]}" \
            "${nlonnll_errs_combined[$i]}"
    done

}

# Create directory for Twiki
mkdir -p "${twikidir}"
mkdir -p "${textdir}"

# Store number of input directories (= number of positional arguments)
n_input_dirs="$#"

# Run script for every positional argument
for logs; do
    run "${logs}"
done

# Combine all log files, if there is more than one
if [ "${n_input_dirs}" -gt 1 ]; then
    combine
fi
